name: Container Vulnerability Scanning with Trivy

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  # schedule:
  #   # Exécute un scan quotidien à minuit (UTC)
  #   - cron: "0 0 * * *"

jobs:
  trivy-scan:
    name: Scan Docker image with Trivy
    runs-on: ubuntu-latest

    steps:
      # Étape 1: Checkout du code
      - name: Checkout code
        uses: actions/checkout@v4

      # Étape 2: Configuration de Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Étape 3: Connexion à Docker Hub (si nécessaire)
      # - name: Login to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKER_HUB_USERNAME }}
      #     password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # Étape 4: Construire l'image Docker
      - name: Build Docker image
        run: docker-compose -f docker-compose.yml build

      # Étape 5: Scanner l'image avec Trivy
      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@0.14.0
        with:
          # Scan l'image que vous venez de construire
          image-ref: "web:latest"
          # Format de sortie du rapport
          format: "table"
          # Niveau de gravité minimum à afficher
          severity: "CRITICAL,HIGH,MEDIUM,LOW,UNKNOWN"
          # Types de vulnérabilités à scanner
          # scanners: "vuln"
          # Sortie le rapport dans un fichier
          output: "trivy-results.txt"
          # Quitte avec un code d'erreur si des vulnérabilités critiques sont trouvées
          exit-code: "1"
          # Ignorer les vulnérabilités non corrigées
          ignore-unfixed: false

      # Étape 6: Upload le rapport (optionnel)
      - name: Upload Trivy scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-results
          path: trivy-results.txt
